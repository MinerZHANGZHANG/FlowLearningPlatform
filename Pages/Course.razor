@page "/Course"
@attribute [Authorize]
@layout ManagerLayout

@inject NavigationManager NavigationManager
@inject ICourseService CourseService
@inject IUserService UserService 

<PageTitle>课程管理</PageTitle>

<AuthorizeView  Roles="管理员" Context="authorContext">
	<Authorized>
		<Layout>
			<Header>
                <div style="float:right">
					<AddCourseButton OnAddSuccess="async ()=>_courses = await CourseService.GetAllAsync(0, 10)" />
				</div>
			</Header>
			<Content>
				@if (_courses != null && _courses.Count > 0)
				{
					<Table TItem="Models.Course"
						   DataSource="@_courses"
						   Size="TableSize.Small">
						<PropertyColumn Title="名称" Property="c=>c.Name">
							<p>@context.Name</p>
						</PropertyColumn>
						<PropertyColumn Title="专业" Property="c=>c.DepartmentTypeId">
							<p>@context.DepartmentType.Name</p>
						</PropertyColumn>
						<ActionColumn Title="操作">
							<Button Icon="user" Type="primary" @onclick="_=>open(context.CourseId)">用户</Button>
							<UpdateCourseButton Course="context" OnAddSuccess="async ()=>_courses = await CourseService.GetAllAsync(0, 10)" />
						</ActionColumn>
					</Table>
					
					<Drawer Closable="true" Width="720" Visible="visible" Title='("添加删除用户")' OnClose="_=>close()">
						<Template style="height:80%">
							<CourseUserForm CourseId="@_currentCourseId" UserWithCourses="@(_userWithCourses??new())"/>
						</Template>
					</Drawer>
				}
				else
				{
					<Empty/>
				}
			</Content>
		</Layout>		
	</Authorized>
</AuthorizeView>

<AuthorizeView Roles="教师,学生">
    <Authorized>
		@if (_courses != null && _courses.Count > 0)
		{
			foreach (var course in _courses)
			{				
				<Card Hoverable="true" Title="@course.Name" >
					<Extra>
						<a	@onclick="()=>NavigateToDetail(course.CourseId.ToString())">查看</a>
					</Extra>
				</Card>
			}
		}
		else
		{
			<Empty></Empty>
		}
	</Authorized>
</AuthorizeView>

@code {
	[CascadingParameter]
	private Task<AuthenticationState>? _authenticationState { get; set; }

	private List<Models.Course> _courses;
	private Guid userId;

	protected override async Task OnParametersSetAsync()
	{
		var state = await _authenticationState;
		AuthService.TryGetUserFromClaim(state.User, out userId, out string userName, out string userRole);
		if (userRole == "教师"||userRole=="学生")
		{
			if (userId != Guid.Empty && _courses == null)
			{
				var response = await CourseService.GetByUserIdAsync(userId.ToString());

				if (response.Success && response.Data != null)
				{
					_courses = response.Data;
					StateHasChanged();
				}
			}
		}
		if (userRole == "管理员")
		{
			if (_courses == null)
			{
				_courses = await CourseService.GetAllAsync(0, 10);
				StateHasChanged();
			}			
		}
		await base.OnParametersSetAsync();
	}

	private void NavigateToDetail(string courseId)
	{
		NavigationManager.NavigateTo($"course/{courseId}");
	}

	#region -课程用户管理-

	// 开关课程用户操作界面
	bool visible = false;
	private Guid _currentCourseId;
	void open(Guid courseId)
	{
		// 打开的同时记录课程编号
		_currentCourseId = courseId;
		this.visible = true;
		GetUserWithCourseId(courseId);
	}
	void close()
	{
		this.visible = false;
	}

	private List<UserWithCourse> _userWithCourses=new();
	// 获取课程所在专业的用户
	// 或许需要加入对其它专业的检索
	private async void GetUserWithCourseId(Guid courseId)
	{
		 _userWithCourses = await UserService.GetUserWithCourseAsync(courseId);
	}
	#endregion
}
