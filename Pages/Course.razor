@layout ManagerLayout
@page "/Course"

@inject ICourseService CourseService
@inject NavigationManager NavigationManager

@inject IUserService UserService 


@*
	实现添加和删除逻辑
*@
<PageTitle>课程管理</PageTitle>

<AuthorizeView  Roles="管理员" Context="authorContext">
	<Authorized>
		<Layout>
			<Header>
                <div style="float:right">
					<AddCourseButton></AddCourseButton>
				</div>
			</Header>
			<Content>
				@if (GetInfo(authorContext.User))
				{
					GetAllCourse();					
				}
				@if (_courses != null && _courses.Count > 0)
				{
					<Table TItem="Models.Course"
						   DataSource="@_courses"
						   Size="TableSize.Small">
						<PropertyColumn Title="名称" Property="c=>c.Name">
							<p>@context.Name</p>
						</PropertyColumn>
						<PropertyColumn Title="专业" Property="c=>c.DepartmentTypeId">
							<p>@context.DepartmentType.Name</p>
						</PropertyColumn>

						<ActionColumn Title="操作">
							<Button Icon="plus" Type="primary" @onclick="_=>open(context.CourseId)">展开操作页</Button>
							
						</ActionColumn>
					</Table>
					
					<Drawer Closable="true" Width="720" Visible="visible" Title='("添加删除用户")' OnClose="_=>close()">
						<Template style="height:80%">
						<Collapse>
							<Panel Header="添加" Key="0">
								<Select TItem="SimpleUser"
											TItemValue="Guid"
											DataSource="@_usersNotInCourse"
											LabelName="@nameof(SimpleUser.Name)"
											ValueName="@nameof(SimpleUser.Id)"
											EnableSearch>
								</Select>

							</Panel>
							<Panel Header="删除" Key="1">
								<AntList DataSource="@_usersInCourse" ItemLayout="ListItemLayout.Horizontal">
									<ChildContent>
												<ListItem>
											<p>@context.Name <a @onclick="()=>Remove(context.Id)">删除</a></p>

												</ListItem>
									</ChildContent>
									<LoadMore>

									</LoadMore>
								</AntList>
							</Panel>
						</Collapse>

					</Template>
				</Drawer>
				}
				

				
			</Content>
		</Layout>
		
	</Authorized>
</AuthorizeView>

<AuthorizeView Roles="教师,学生">
    <Authorized>
		@{
			GetInfo(context.User);
			GetCourseById();
		}
		@if (_courses != null && _courses.Count > 0)
		{
			foreach (var course in _courses)
			{				
				<Card Hoverable="true" Title="@course.Name" >
					<Extra>
						<a	@onclick="()=>NavigateToDetail(course.CourseId.ToString())">查看</a>
					</Extra>
				</Card>
			}
		}
		else
		{
			<Empty></Empty>
		}
	</Authorized>
</AuthorizeView>

@code {

	private List<Models.Course> _courses;
	private Guid userId;

	private bool GetInfo(System.Security.Claims.ClaimsPrincipal User) =>
	AuthService.TryGetUserFromClaim(User, out userId, out string userName, out string userRole);

	private async void GetCourseById()
	{
		if (userId != Guid.Empty&&_courses==null)
		{
			var response = await CourseService.GetByUserIdAsync(userId.ToString());

			if (response.Success && response.Data != null)
			{
				_courses = response.Data;
				StateHasChanged();
			}
		}
	}

	private async void GetAllCourse()
	{
		if (_courses == null)
		{
			_courses = await CourseService.GetAllAsync(0, 10);
			StateHasChanged();
		}

	}

	public class SimpleUser
	{
		public Guid Id { get; set; }
		public string Name { get; set; }
	}

	List<SimpleUser> _usersInCourse = new();
	List<SimpleUser> _usersNotInCourse = new();
	private async void GetUserWithCourseId(Guid courseId)
	{
		var _userWithCourses = await UserService.GetUserWithCourseAsync(courseId);
		_usersInCourse.Clear();
		_usersNotInCourse.Clear();
		foreach (var user in _userWithCourses)
		{
			if (user.IsInCourse)
			{
				_usersInCourse.Add(new(){Id=user.UserId,Name=user.UserName});
			}
			else
			{
				_usersNotInCourse.Add(new(){Id=user.UserId,Name=user.UserName});
			}
			StateHasChanged();
		}
	}


	private void NavigateToDetail(string courseId)
	{
		NavigationManager.NavigateTo($"course/{courseId}/{userId}");
	}

	bool visible = false;

	void open(Guid courseId)
	{
		this.visible = true;
		GetUserWithCourseId(courseId);
	}

	void close()
	{
		this.visible = false;
	}

	public void Remove(Guid userId)
	{
		// DeleteUser
	}
}
