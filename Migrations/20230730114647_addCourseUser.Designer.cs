// <auto-generated />
using System;
using FlowLearningPlatform.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlowLearningPlatform.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230730114647_addCourseUser")]
    partial class addCourseUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlowLearningPlatform.Models.Assignment", b =>
                {
                    b.Property<Guid>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FileSetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("AssignmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("FileSetId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.AssignmentDivision", b =>
                {
                    b.Property<Guid>("AssignmentDivisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("FileSizeLimite")
                        .HasColumnType("real");

                    b.Property<Guid>("SubmissionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssignmentDivisionId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("SubmissionTypeId");

                    b.ToTable("AssignmentDivisions");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.HasIndex("DepartmentTypeId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Enum.DepartmentType", b =>
                {
                    b.Property<Guid>("DepartmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DepartmentTypeId");

                    b.HasIndex("SchoolId");

                    b.ToTable("DepartmentTypes");

                    b.HasData(
                        new
                        {
                            DepartmentTypeId = new Guid("425f4865-b6b5-4ef4-ad84-d9282f8d3d2d"),
                            Name = "未确定",
                            SchoolId = new Guid("eefa2b64-fa75-4212-a303-c91dfb673a78")
                        },
                        new
                        {
                            DepartmentTypeId = new Guid("fb96e037-afba-453a-b28d-6c9c5d387a98"),
                            Name = "软件工程",
                            SchoolId = new Guid("4d32191e-f958-4a51-943d-46b638174347")
                        },
                        new
                        {
                            DepartmentTypeId = new Guid("3eb704fc-a2b6-4db1-be41-a80d5404866a"),
                            Name = "网络空间安全",
                            SchoolId = new Guid("4d32191e-f958-4a51-943d-46b638174347")
                        },
                        new
                        {
                            DepartmentTypeId = new Guid("b34f9ab6-43f9-4408-a11f-46896f4750fa"),
                            Name = "数字媒体技术",
                            SchoolId = new Guid("4d32191e-f958-4a51-943d-46b638174347")
                        },
                        new
                        {
                            DepartmentTypeId = new Guid("3fc0862f-c472-47ad-b42c-59ecfdf68192"),
                            Name = "计算机科学与技术",
                            SchoolId = new Guid("c0f97b1c-6670-4e07-8210-6c4defa8c18f")
                        },
                        new
                        {
                            DepartmentTypeId = new Guid("d92575b1-baf7-45c3-96d6-d8d750fcb632"),
                            Name = "通信工程",
                            SchoolId = new Guid("c0f97b1c-6670-4e07-8210-6c4defa8c18f")
                        });
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Enum.FilePurposeType", b =>
                {
                    b.Property<Guid>("FilePurposeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FilePurposeTypeId");

                    b.ToTable("FilePurposeTypes");

                    b.HasData(
                        new
                        {
                            FilePurposeTypeId = new Guid("90a3a927-db8d-4739-93f2-794c68a1a71a"),
                            Name = "作业发布"
                        },
                        new
                        {
                            FilePurposeTypeId = new Guid("61444950-700c-4e4f-a1d8-3b17bd8ccff6"),
                            Name = "作业提交"
                        },
                        new
                        {
                            FilePurposeTypeId = new Guid("87968014-2766-461b-865a-424af46b6eef"),
                            Name = "公告发布"
                        });
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Enum.RoleType", b =>
                {
                    b.Property<Guid>("RoleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleTypeId");

                    b.ToTable("RoleTypes");

                    b.HasData(
                        new
                        {
                            RoleTypeId = new Guid("b3d10f3f-46ea-4d00-808c-2df8d9f29ebd"),
                            Name = "未知"
                        },
                        new
                        {
                            RoleTypeId = new Guid("5a0f2626-9eef-45f9-94c8-4df1b2e9359d"),
                            Name = "教师"
                        },
                        new
                        {
                            RoleTypeId = new Guid("6bbdfb02-b79b-4b64-ad30-473fad0c0bbc"),
                            Name = "管理员"
                        },
                        new
                        {
                            RoleTypeId = new Guid("5caeae05-ae9c-46b6-99e6-2a16ea64ef25"),
                            Name = "学生"
                        });
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Enum.SchoolType", b =>
                {
                    b.Property<Guid>("SchoolTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolTypeId");

                    b.ToTable("SchoolTypes");

                    b.HasData(
                        new
                        {
                            SchoolTypeId = new Guid("eefa2b64-fa75-4212-a303-c91dfb673a78"),
                            Name = "未确定"
                        },
                        new
                        {
                            SchoolTypeId = new Guid("4d32191e-f958-4a51-943d-46b638174347"),
                            Name = "软件学院"
                        },
                        new
                        {
                            SchoolTypeId = new Guid("c0f97b1c-6670-4e07-8210-6c4defa8c18f"),
                            Name = "信息学院"
                        });
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Enum.SubmissionType", b =>
                {
                    b.Property<Guid>("SubmissionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubmissionTypeId");

                    b.ToTable("SubmissionTypes");

                    b.HasData(
                        new
                        {
                            SubmissionTypeId = new Guid("565ce254-3ff7-4b6a-a69c-922c4d58088d"),
                            Name = "未确定"
                        },
                        new
                        {
                            SubmissionTypeId = new Guid("3a800e1e-be7c-404a-b860-bbc6b82b9634"),
                            Name = "富文本"
                        },
                        new
                        {
                            SubmissionTypeId = new Guid("f14a077f-5f46-4766-856e-26a13dfaf60a"),
                            Name = "文档"
                        },
                        new
                        {
                            SubmissionTypeId = new Guid("ea185274-44f5-4be7-bd40-df9774029fef"),
                            Name = "图片"
                        },
                        new
                        {
                            SubmissionTypeId = new Guid("5cbd28b8-67df-4f39-9d60-31523bdffdfd"),
                            Name = "视频"
                        },
                        new
                        {
                            SubmissionTypeId = new Guid("3a3d25bc-279f-42ca-a18f-1306c79b07af"),
                            Name = "音频"
                        },
                        new
                        {
                            SubmissionTypeId = new Guid("cfb6ec31-7f48-46b2-8497-449292cf5a97"),
                            Name = "压缩包"
                        });
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.FileData", b =>
                {
                    b.Property<Guid>("FileDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FileSetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageType")
                        .HasColumnType("int");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime2");

                    b.HasKey("FileDataId");

                    b.HasIndex("FileSetId");

                    b.ToTable("FileDatas");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.FileSet", b =>
                {
                    b.Property<Guid>("FileSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FilePurposeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurposeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UploadUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FileSetId");

                    b.HasIndex("FilePurposeTypeId");

                    b.HasIndex("UploadUserId");

                    b.ToTable("FileSets");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Submission", b =>
                {
                    b.Property<Guid>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Assignmentd")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileSetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(6, 3)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SubmissionCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionTime")
                        .HasColumnType("datetime2");

                    b.HasKey("SubmissionId");

                    b.HasIndex("Assignmentd");

                    b.HasIndex("FileSetId");

                    b.HasIndex("StudentId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Brithday")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("DepartmentTypeId");

                    b.HasIndex("RoleTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.UserCourse", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(6, 3)");

                    b.HasKey("CourseId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCourses");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Assignment", b =>
                {
                    b.HasOne("FlowLearningPlatform.Models.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowLearningPlatform.Models.FileSet", "FileSet")
                        .WithMany()
                        .HasForeignKey("FileSetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("FileSet");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.AssignmentDivision", b =>
                {
                    b.HasOne("FlowLearningPlatform.Models.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowLearningPlatform.Models.Enum.SubmissionType", "SubmissionType")
                        .WithMany()
                        .HasForeignKey("SubmissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("SubmissionType");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Course", b =>
                {
                    b.HasOne("FlowLearningPlatform.Models.Enum.DepartmentType", "DepartmentType")
                        .WithMany()
                        .HasForeignKey("DepartmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentType");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Enum.DepartmentType", b =>
                {
                    b.HasOne("FlowLearningPlatform.Models.Enum.SchoolType", "SchoolType")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolType");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.FileData", b =>
                {
                    b.HasOne("FlowLearningPlatform.Models.FileSet", "FileSet")
                        .WithMany("Files")
                        .HasForeignKey("FileSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileSet");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.FileSet", b =>
                {
                    b.HasOne("FlowLearningPlatform.Models.Enum.FilePurposeType", "FilePurposeType")
                        .WithMany()
                        .HasForeignKey("FilePurposeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowLearningPlatform.Models.User", "UploadUser")
                        .WithMany()
                        .HasForeignKey("UploadUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilePurposeType");

                    b.Navigation("UploadUser");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Submission", b =>
                {
                    b.HasOne("FlowLearningPlatform.Models.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("Assignmentd")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowLearningPlatform.Models.FileSet", "FileSet")
                        .WithMany()
                        .HasForeignKey("FileSetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlowLearningPlatform.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("FileSet");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.User", b =>
                {
                    b.HasOne("FlowLearningPlatform.Models.Enum.DepartmentType", "DepartmentType")
                        .WithMany()
                        .HasForeignKey("DepartmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlowLearningPlatform.Models.Enum.RoleType", "RoleType")
                        .WithMany()
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentType");

                    b.Navigation("RoleType");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.UserCourse", b =>
                {
                    b.HasOne("FlowLearningPlatform.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowLearningPlatform.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Assignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Course", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.FileSet", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
