// <auto-generated />
using System;
using FlowLearningPlatform.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlowLearningPlatform.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230728110407_Assignment")]
    partial class Assignment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlowLearningPlatform.Models.Assignment", b =>
                {
                    b.Property<Guid>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FileSetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("AssignmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("FileSetId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.AssignmentDivision", b =>
                {
                    b.Property<Guid>("AssignmentDivisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("FileSizeLimite")
                        .HasColumnType("real");

                    b.Property<Guid>("SubmissionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssignmentDivisionId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("SubmissionTypeId");

                    b.ToTable("AssignmentDivisions");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.HasIndex("DepartmentTypeId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Enum.DepartmentType", b =>
                {
                    b.Property<Guid>("DepartmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DepartmentTypeId");

                    b.HasIndex("SchoolId");

                    b.ToTable("DepartmentTypes");

                    b.HasData(
                        new
                        {
                            DepartmentTypeId = new Guid("c4f7137f-daf4-45c4-bc0c-a3c995968e94"),
                            Name = "未确定",
                            SchoolId = new Guid("b9307e94-5e6a-4682-8f28-9c8c6d124f84")
                        },
                        new
                        {
                            DepartmentTypeId = new Guid("aab07032-f995-4773-964a-c4cc85ad09a5"),
                            Name = "软件工程",
                            SchoolId = new Guid("16015a15-9d80-45f0-b2b0-e86cb4531e1f")
                        },
                        new
                        {
                            DepartmentTypeId = new Guid("a0845bb0-5850-4cad-9834-3ddf93e678be"),
                            Name = "网络空间安全",
                            SchoolId = new Guid("16015a15-9d80-45f0-b2b0-e86cb4531e1f")
                        },
                        new
                        {
                            DepartmentTypeId = new Guid("68ec7ddc-68e7-4893-8831-f895ff75d402"),
                            Name = "数字媒体技术",
                            SchoolId = new Guid("16015a15-9d80-45f0-b2b0-e86cb4531e1f")
                        },
                        new
                        {
                            DepartmentTypeId = new Guid("418ac08b-0dba-4c4a-99a5-fa3d17f139f4"),
                            Name = "计算机科学与技术",
                            SchoolId = new Guid("6e584649-c615-4717-be06-6664c0041f71")
                        },
                        new
                        {
                            DepartmentTypeId = new Guid("a4bbc6ef-d2fa-4ef7-89ef-8b3b2f0e260b"),
                            Name = "通信工程",
                            SchoolId = new Guid("6e584649-c615-4717-be06-6664c0041f71")
                        });
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Enum.FilePurposeType", b =>
                {
                    b.Property<Guid>("FilePurposeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FilePurposeTypeId");

                    b.ToTable("FilePurposeTypes");

                    b.HasData(
                        new
                        {
                            FilePurposeTypeId = new Guid("ceb29c89-4049-4396-8483-01e02f96b853"),
                            Name = "作业发布"
                        },
                        new
                        {
                            FilePurposeTypeId = new Guid("c30fc01a-46d2-4077-bbdb-6f4caa4f0f8c"),
                            Name = "作业提交"
                        },
                        new
                        {
                            FilePurposeTypeId = new Guid("37dc7e0e-5972-4454-af19-09de3dc26ac6"),
                            Name = "公告发布"
                        });
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Enum.RoleType", b =>
                {
                    b.Property<Guid>("RoleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleTypeId");

                    b.ToTable("RoleTypes");

                    b.HasData(
                        new
                        {
                            RoleTypeId = new Guid("aef75f95-8138-4b47-bdd0-45cc47da4567"),
                            Name = "未知"
                        },
                        new
                        {
                            RoleTypeId = new Guid("bf57bdb1-9095-429a-a743-a74785e999e9"),
                            Name = "教师"
                        },
                        new
                        {
                            RoleTypeId = new Guid("7611f5d0-b6b5-4c46-8ece-f1a0d2d71f2d"),
                            Name = "管理员"
                        },
                        new
                        {
                            RoleTypeId = new Guid("cdc7fe6b-eaa4-4cee-b7de-2dbc048b122d"),
                            Name = "学生"
                        });
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Enum.SchoolType", b =>
                {
                    b.Property<Guid>("SchoolTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolTypeId");

                    b.ToTable("SchoolTypes");

                    b.HasData(
                        new
                        {
                            SchoolTypeId = new Guid("b9307e94-5e6a-4682-8f28-9c8c6d124f84"),
                            Name = "未确定"
                        },
                        new
                        {
                            SchoolTypeId = new Guid("16015a15-9d80-45f0-b2b0-e86cb4531e1f"),
                            Name = "软件学院"
                        },
                        new
                        {
                            SchoolTypeId = new Guid("6e584649-c615-4717-be06-6664c0041f71"),
                            Name = "信息学院"
                        });
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Enum.SubmissionType", b =>
                {
                    b.Property<Guid>("SubmissionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubmissionTypeId");

                    b.ToTable("SubmissionTypes");

                    b.HasData(
                        new
                        {
                            SubmissionTypeId = new Guid("8bf7b898-3859-4425-bf0f-f53198c99a35"),
                            Name = "未确定"
                        },
                        new
                        {
                            SubmissionTypeId = new Guid("aeb24e81-f4e4-499c-9877-fdb4549cb1cd"),
                            Name = "富文本"
                        },
                        new
                        {
                            SubmissionTypeId = new Guid("63734e3c-e585-49da-a0dd-09ed14a223a9"),
                            Name = "文档"
                        },
                        new
                        {
                            SubmissionTypeId = new Guid("e6ecdfed-4cc3-4325-ba02-75ca36318002"),
                            Name = "图片"
                        },
                        new
                        {
                            SubmissionTypeId = new Guid("83826beb-5e03-4cbb-9286-0e45d116f7c9"),
                            Name = "视频"
                        },
                        new
                        {
                            SubmissionTypeId = new Guid("94a3729e-fc97-476c-9c73-87448d79a5d7"),
                            Name = "音频"
                        },
                        new
                        {
                            SubmissionTypeId = new Guid("5a709fae-93d0-4899-978d-4f271d2a43b9"),
                            Name = "压缩包"
                        });
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.FileData", b =>
                {
                    b.Property<Guid>("FileDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FileSetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<int>("StorageType")
                        .HasColumnType("int");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime2");

                    b.HasKey("FileDataId");

                    b.HasIndex("FileSetId");

                    b.ToTable("FileDatas");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.FileSet", b =>
                {
                    b.Property<Guid>("FileSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FilePurposeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurposeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UploadUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FileSetId");

                    b.HasIndex("FilePurposeTypeId");

                    b.HasIndex("UploadUserId");

                    b.ToTable("FileSets");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Submission", b =>
                {
                    b.Property<Guid>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Assignmentd")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileSetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(6, 3)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SubmissionCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionTime")
                        .HasColumnType("datetime2");

                    b.HasKey("SubmissionId");

                    b.HasIndex("Assignmentd");

                    b.HasIndex("FileSetId");

                    b.HasIndex("StudentId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Brithday")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("DepartmentTypeId");

                    b.HasIndex("RoleTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Assignment", b =>
                {
                    b.HasOne("FlowLearningPlatform.Models.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowLearningPlatform.Models.FileSet", "FileSet")
                        .WithMany()
                        .HasForeignKey("FileSetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("FileSet");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.AssignmentDivision", b =>
                {
                    b.HasOne("FlowLearningPlatform.Models.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowLearningPlatform.Models.Enum.SubmissionType", "SubmissionType")
                        .WithMany()
                        .HasForeignKey("SubmissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("SubmissionType");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Course", b =>
                {
                    b.HasOne("FlowLearningPlatform.Models.Enum.DepartmentType", "DepartmentType")
                        .WithMany()
                        .HasForeignKey("DepartmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowLearningPlatform.Models.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentType");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Enum.DepartmentType", b =>
                {
                    b.HasOne("FlowLearningPlatform.Models.Enum.SchoolType", "SchoolType")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolType");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.FileData", b =>
                {
                    b.HasOne("FlowLearningPlatform.Models.FileSet", "FileSet")
                        .WithMany("Files")
                        .HasForeignKey("FileSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileSet");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.FileSet", b =>
                {
                    b.HasOne("FlowLearningPlatform.Models.Enum.FilePurposeType", "FilePurposeType")
                        .WithMany()
                        .HasForeignKey("FilePurposeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowLearningPlatform.Models.User", "UploadUser")
                        .WithMany()
                        .HasForeignKey("UploadUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilePurposeType");

                    b.Navigation("UploadUser");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Submission", b =>
                {
                    b.HasOne("FlowLearningPlatform.Models.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("Assignmentd")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowLearningPlatform.Models.FileSet", "FileSet")
                        .WithMany()
                        .HasForeignKey("FileSetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlowLearningPlatform.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("FileSet");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.User", b =>
                {
                    b.HasOne("FlowLearningPlatform.Models.Enum.DepartmentType", "DepartmentType")
                        .WithMany()
                        .HasForeignKey("DepartmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlowLearningPlatform.Models.Enum.RoleType", "RoleType")
                        .WithMany()
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentType");

                    b.Navigation("RoleType");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Assignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.Course", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("FlowLearningPlatform.Models.FileSet", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
